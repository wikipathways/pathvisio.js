'use strict';

/* Directives */

angular.module('myApp.directives', [])
.directive('pathway', ['pathwayService', function(pathwayService) {
	return function($scope, elm, attrs) {
		function objToString (obj) {
    var str = '';
    for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
            str += p + '::' + obj[p] + '\n';
        }
    }
    return str;
}
		$scope.editable = true; 
		console.log("$scope");
		console.log(objToString($scope));
		console.log(attrs);
		var cscope = self.cscope = $scope

// Define svg
		var svg = self.svg = d3.select("svg#pathwaySvg");
		$scope.$watch('pathway', function(pathway) {
		  if (pathway)
			  {
				if ($scope.editable == true) {
					svg.attr("style", "preserveAspectRatio: xMidYMid; display: block; position:absolute; height:auto; bottom:0; top:0; left:0; right:0; margin-top:0; margin-bottom:0; margin-right:0; margin-left:0; background-color: white; viewBox: " + "0 0 " + svg[0][0].clientWidth + " " + svg[0][0].clientHeight)
				}
				else {
					svg.attr("style", "preserveAspectRatio: xMidYMid; display: block; position:absolute; height:auto; bottom:0; top:0; left:0; right:0; margin-top:0; margin-bottom:0; margin-right:0; margin-left:0; background-color: white; viewBox: " + "0 0 " + Math.max($scope.pathway.width, svg[0][0].clientWidth) + " " + Math.max($scope.pathway.height, svg[0][0].clientHeight))
				};
			  }
		})
		// need to make the edit button toggle editable to true
		/*
		if ($scope.editable == true) {
			svg.attr("style", "preserveAspectRatio: xMidYMid; display: block; position:absolute; height:auto; bottom:0; top:0; left:0; right:0; margin-top:0; margin-bottom:0; margin-right:0; margin-left:0; background-color: white; viewBox: " + "0 0 " + svg[0][0].clientWidth + " " + svg[0][0].clientHeight)
		}
		else {
			svg.attr("style", "preserveAspectRatio: xMidYMid; display: block; position:absolute; height:auto; bottom:0; top:0; left:0; right:0; margin-top:0; margin-bottom:0; margin-right:0; margin-left:0; background-color: white; viewBox: " + "0 0 " + Math.max($scope.pathway.width, svg[0][0].clientWidth) + " " + Math.max($scope.pathway.height, svg[0][0].clientHeight))
		};
		$scope.$watch('$scope.editable', function (){
			alert($scope.editable);
			alert($scope);
			if ($scope.editable) {
				svg.attr("viewBox", function() { return "0 0 " + svg[0][0].clientWidth + " " + svg[0][0].clientHeight; })
			}
			else {
				svg.attr("viewBox", function() { return "0 0 " + Math.max($scope.pathway.width, svg[0][0].clientWidth) + " " + Math.max($scope.pathway.height, svg[0][0].clientHeight); })
			};
		})
	       */
	}
}])
.directive('node', ['pathwayService', function(pathwayService) {
	return function($scope, elm, attrs) {
		var addMetabolite = function () {
			//Need to look up how id's are created in Java PV;
			$scope.$apply( function() {
				$scope.$parent.pathway.nodes.push({"id": "12345", "nodeType": "Metabolite", "nodeShape": "Rectangle", "x": 10, "y": 10, "width": 150, "height": 75, "fill": "white", "stroke": "blue", "label": "Metabolite", "fontSize": 10});
			});
		};
		var addGeneProduct = function () {
			//Need to look up how id's are created in Java PV;
			$scope.$apply( function() {
				$scope.$parent.pathway.nodes.push({"id": "12345", "nodeType": "Metabolite", "nodeShape": "Rectangle", "x": 10, "y": 10, "width": 150, "height": 75, "fill": "white", "stroke": "black", "label": "GeneProduct", "fontSize": 10});
			});
		};
		var dragButtonMetabolite = d3.behavior.drag()
		.origin(this)
		.on('dragstart', function(d) {
			addMetabolite()
		});
		var dragButtonMetaboliteDiv = d3.select("div#dragButtonMetabolite")
		.call(dragButtonMetabolite);

		var dragButton = d3.behavior.drag()
		.origin(this)
		.on('dragstart', function(d) {
			addGeneProduct()
		});
		var dragButtonDiv = d3.select("div#dragButton")
		.call(dragButton);

// Functions for dragging and resizing nodes

		var nodeValidityStatus = function() {
			if ( 
			    	d3.event.x >= 0 &&
			    	d3.event.y >= 0 &&
				$scope.node.width >= 15 &&
				$scope.node.height >= 15 &&
				$scope.node.x >= 0 &&
				$scope.node.y >= 0
			   ) {
				return 1;
			}
			else {
				return 0;
			}
		}
		var dragNode = d3.behavior.drag()
		.origin(this)
		.on('drag', function(d) {
			console.log('dragNode');
			console.log('d3.event.x');
			console.log(d3.event.x);
			$scope.$apply( function() {

				if ( nodeValidityStatus() ) {
					$scope.node.x = Math.max(0, $scope.node.x + d3.event.dx);
					$scope.node.y = Math.max(0, $scope.node.y + d3.event.dy);
					$scope.$parent.pathway.width = Math.max($scope.$parent.pathway.width, $scope.node.x + $scope.node.width);
					$scope.$parent.pathway.height = Math.max($scope.$parent.pathway.height, $scope.node.y + $scope.node.height);
				}
			})
		})

		var dragE = function (dx) {
			$scope.$apply(function() {
				if ( nodeValidityStatus() ) {
					$scope.node.width = Math.max(15, $scope.node.width + d3.event.dx);
					$scope.$parent.pathway.width = Math.max($scope.$parent.pathway.width, $scope.node.x + $scope.node.width);
				}
			})
		};
		var dragBehaviorE = d3.behavior.drag()
		.origin(this)
		.on('drag', function() {
			console.log('dragBehaviorE');
			dragE(d3.event.dx);
		})

		var dragW = function (dx) {
			$scope.$apply(function() {
				if ( d3.event.x <= $scope.node.x + $scope.node.width - 15 && nodeValidityStatus() ) {
					$scope.node.width = Math.max(15, $scope.node.width - dx);
					$scope.node.x = Math.max(0, $scope.node.x + dx);
				}
			})
		};
		var dragBehaviorW = d3.behavior.drag()
		.origin(this)
		.on('drag', function(d) {
			console.log('dragBehaviorW');
			dragW(d3.event.dx);
		})

		var dragN = function (dy) {
			$scope.$apply(function() {
				if ( d3.event.y <= $scope.node.y + $scope.node.height - 15 && nodeValidityStatus() ) {
					$scope.node.height = Math.max(15, $scope.node.height - dy);
					$scope.node.y = Math.max(0, $scope.node.y + dy);
				}
			})
		};
		var dragBehaviorN = d3.behavior.drag()
		.origin(this)
		.on('drag', function() {
			console.log('dragBehaviorN');
			dragN(d3.event.dy);
		})

		var dragS = function (dy) {
			$scope.$apply(function() {
				if ( nodeValidityStatus() ) {
					$scope.node.height = Math.max(15, $scope.node.height + dy);
					$scope.$parent.pathway.height = Math.max($scope.$parent.pathway.height, $scope.node.y + $scope.node.height);
				}
			})
		};
		var dragBehaviorS = d3.behavior.drag()
		.origin(this)
		.on('drag', function() {
			console.log('dragBehaviorS');
			dragS(d3.event.dy);
		})

		var dragBehaviorNW = d3.behavior.drag()
		.origin(this)
		.on('drag', function() {
			console.log('dragNW');
			dragN(d3.event.dy);
			dragW(d3.event.dx);
		})

		var dragBehaviorNE = d3.behavior.drag()
		.origin(this)
		.on('drag', function() {
			console.log('dragNE');
			dragN(d3.event.dy);
			dragE(d3.event.dx);
		})

		var dragBehaviorSW = d3.behavior.drag()
		.origin(this)
		.on('drag', function() {
			console.log('dragSW');
			dragS(d3.event.dy);
			dragW(d3.event.dx);
		})

		var dragBehaviorSE = d3.behavior.drag()
		.origin(this)
		.on('drag', function() {
			console.log('dragSE');
			dragS(d3.event.dy);
			dragE(d3.event.dx);
		})

// Define SVG
		var svg = self.svg = d3.select("svg#pathwaySvg")

// Define Node 
		var node = d3.select(elm[0])
		.attr("transform", function() { return 'translate(' + $scope.node.x + ',' + $scope.node.y + ')'; });

// Define Node Label
		var label = node.append("text")
		.attr("id", $scope.node.id)
		.attr("class", "node " + $scope.node.nodeType)
		.attr("font-size", $scope.node.fontSize + "px")
		.text($scope.node.label);

		var positionLabel = function (){
			label.text($scope.node.label);
			var labelBbox = label[0][0].getBBox();
			var labelText = $scope.node.label;
			if ( $scope.node.width < labelBbox["width"] + 5 ) {
				labelText = labelText.substring(0, labelText.length - 4);
				label.text(labelText + "...");
				labelBbox = label[0][0].getBBox();
				while ( $scope.node.width < labelBbox["width"] + 5 ) {
					labelText = labelText.substring(0, labelText.length - 1);
					label.text(labelText + "...");
					labelBbox = label[0][0].getBBox();
				};

			};
			var labelxtransform = -1*(labelBbox["x"]) + $scope.node.width/2 - labelBbox["width"]/2;
			var labelytransform = -1*(labelBbox["y"]) + $scope.node.height/2 - labelBbox["height"]/2;
			label.attr("transform", "translate(" + labelxtransform + "," + labelytransform + ")");
		}

// Define Drag Box (for moving node) 
		var dragBoxNode = d3.select("svg").append("rect")
		.attr("x", $scope.node.x )
		.attr("y", $scope.node.y )
		.attr("height", $scope.node.height )
		.attr("id", function() { return "dragBoxNode" + $scope.node.id; })
		.attr("width", $scope.node.width)
		.attr("fill", "green")
		.attr("fill-opacity", 0)
		.attr("cursor", "move")
		.call(dragNode);

// Define Drag Bars (for resizing node) 
		var dragBarWidth = 14;

		var dragBarE = d3.select("svg").append("rect")
		.attr("x", function(d) { return $scope.node.x + $scope.node.width - (dragBarWidth/2); })
		.attr("y", function(d) { return $scope.node.y + dragBarWidth/2; })
		.attr("id", function() { return "dragBarE" + $scope.node.id; })
		.attr("height", function(d) { return $scope.node.height - dragBarWidth; })
		.attr("width", dragBarWidth)
		.attr("fill", "green")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "ew-resize")
		.call(dragBehaviorE);

		var dragBarW = d3.select("svg").append("rect")
		.attr("x", function() { return $scope.node.x - dragBarWidth/2; } )
		.attr("y", function() { return $scope.node.y + dragBarWidth/2; } )
		.attr("height", function() { return $scope.node.height - dragBarWidth; })
		.attr("id", function() { return "dragBarW" + $scope.node.id; })
		.attr("width", dragBarWidth)
		.attr("fill", "green")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "ew-resize")
		.call(dragBehaviorW);

		var dragBarN = d3.select("svg").append("rect")
		.attr("x", function() { return $scope.node.x + dragBarWidth/2; } )
		.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
		.attr("height", dragBarWidth)
		.attr("id", function() { return "dragBarN" + $scope.node.id; })
		.attr("width", function(d) { return $scope.node.width - dragBarWidth; })
		.attr("fill", "green")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "ns-resize")
		.call(dragBehaviorN);

		var dragBarS = d3.select("svg").append("rect")
		.attr("x", function() { return $scope.node.x + dragBarWidth/2; } )
		.attr("y", function(d) { return $scope.node.y + $scope.node.height - (dragBarWidth/2) })
		.attr("height", dragBarWidth)
		.attr("id", function() { return "dragBarS" + $scope.node.id; })
		.attr("width", function(d) { return $scope.node.width - dragBarWidth; })
		.attr("fill", "green")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "ns-resize")
		.call(dragBehaviorS);

		var dragBarNW = d3.select("svg").append("rect")
		.attr("x", function() { return $scope.node.x - dragBarWidth/2; } )
		.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
		.attr("height", dragBarWidth)
		.attr("id", function() { return "dragBarNW" + $scope.node.id; })
		.attr("width", dragBarWidth)
		.attr("fill", "red")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "nwse-resize")
		.call(dragBehaviorNW);

		var dragBarNE = d3.select("svg").append("rect")
		.attr("x", function() { return $scope.node.x + $scope.node.width - dragBarWidth/2; } )
		.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
		.attr("height", dragBarWidth)
		.attr("id", function() { return "dragBarNE" + $scope.node.id; })
		.attr("width", dragBarWidth)
		.attr("fill", "red")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "nesw-resize")
		.call(dragBehaviorNE);

		var dragBarSW = d3.select("svg").append("rect")
		.attr("x", function() { return $scope.node.x - dragBarWidth/2; } )
		.attr("y", function() { return $scope.node.y + $scope.node.height - dragBarWidth/2; } )
		.attr("height", dragBarWidth)
		.attr("id", function() { return "dragBarSW" + $scope.node.id; })
		.attr("width", dragBarWidth)
		.attr("fill", "red")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "nesw-resize")
		.call(dragBehaviorSW);

		var dragBarSE = d3.select("svg").append("rect")
		.attr("x", function() { return $scope.node.x + $scope.node.width - dragBarWidth/2; } )
		.attr("y", function() { return $scope.node.y + $scope.node.height - dragBarWidth/2; } )
		.attr("height", dragBarWidth)
		.attr("id", function() { return "dragBarSE" + $scope.node.id; })
		.attr("width", dragBarWidth)
		.attr("fill", "red")
		.attr("fill-opacity", 0.05)
		.attr("cursor", "nwse-resize")
		.call(dragBehaviorSE);

// Define Node Shape 
		if ( $scope.node.nodeShape == "Rectangle" ) {
			var nodeShape = node.append("rect")
			.attr("width", function() { return $scope.node.width + "px"; } )
			.attr("height", function() { return $scope.node.height + "px"; } );
		}
		else { if ( $scope.node.nodeShape == "RoundedRectangle" ) {
			var nodeShape = node.append("rect")
			.attr("width", function() { return $scope.node.width + "px"; } )
			.attr("height", function() { return $scope.node.height + "px"; } )
			.attr("rx", 10 + "px")
			.attr("ry", 10 + "px");
		}
		else { if ( $scope.node.nodeShape == "Oval" ) {
			var nodeShape = node.append("ellipse")
			.attr("cx", function() { return $scope.node.width/2 + "px"; })
			.attr("cy", function() { return $scope.node.height/2 + "px"; })
			.attr("rx", function() { return $scope.node.width/2 + "px"; })
			.attr("ry", function() { return $scope.node.height/2 + "px"; });
		}
		else {
			var nodeShape = node.append("rect")
			.attr("width", function() { return $scope.node.width + "px"; } )
			.attr("height", function() { return $scope.node.height + "px"; } );
			console.log("This node shape type hasn't been added to pathvisio.js yet");
		}}};
		nodeShape
		.attr("fill", $scope.node.fill)
		.attr("stroke", $scope.node.stroke )
		.attr("fill-opacity", 0);
// Scope watches
		$scope.$watch('node.x', function (){
			node.attr("transform", function() { return 'translate(' + $scope.node.x + ',' + $scope.node.y + ')'; });
			dragBoxNode.attr("x", $scope.node.x )
			dragBarE.attr("x", function() { return $scope.node.x + $scope.node.width - (dragBarWidth/2); })
			dragBarW.attr("x", function() { return $scope.node.x - dragBarWidth/2; } );
			dragBarN.attr("x", function() { return $scope.node.x + dragBarWidth/2; } )
			dragBarS.attr("x", function() { return $scope.node.x + dragBarWidth/2; } )
			dragBarNW.attr("x", function() { return $scope.node.x - dragBarWidth/2; } )
			dragBarNE.attr("x", function() { return $scope.node.x + $scope.node.width - dragBarWidth/2; } )
			dragBarSW.attr("x", function() { return $scope.node.x - dragBarWidth/2; } )
			dragBarSE.attr("x", function() { return $scope.node.x + $scope.node.width - dragBarWidth/2; } )
		})
		$scope.$watch('node.y', function (){
			node.attr("transform", function() { return 'translate(' + $scope.node.x + ',' + $scope.node.y + ')'; });
			dragBoxNode.attr("y", $scope.node.y );
			dragBarE.attr("y", function(d) { return $scope.node.y + dragBarWidth/2; });
			dragBarW.attr("y", function() { return $scope.node.y + dragBarWidth/2; } );
			dragBarN.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
			dragBarS.attr("y", function(d) { return $scope.node.y + $scope.node.height - (dragBarWidth/2) })
			dragBarNW.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
			dragBarNE.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
			dragBarSW.attr("y", function() { return $scope.node.y + $scope.node.height - dragBarWidth/2; } )
			dragBarSE.attr("y", function() { return $scope.node.y + $scope.node.height - dragBarWidth/2; } )
			})
		$scope.$watch('node.width', function (){
			dragBoxNode.attr("width", $scope.node.width );
			dragBarE.attr("x", function(d) { return $scope.node.x + $scope.node.width - (dragBarWidth/2); });
			dragBarW.attr("x", function() { return $scope.node.x - dragBarWidth/2; } );
			dragBarN.attr("width", function(d) { return $scope.node.width - dragBarWidth; })
			dragBarS.attr("width", function(d) { return $scope.node.width - dragBarWidth; })
			dragBarNW.attr("x", function() { return $scope.node.x - dragBarWidth/2; } )
			dragBarNE.attr("x", function() { return $scope.node.x + $scope.node.width - dragBarWidth/2; } )
			dragBarSW.attr("x", function() { return $scope.node.x - dragBarWidth/2; } )
			dragBarSE.attr("x", function() { return $scope.node.x + $scope.node.width - dragBarWidth/2; } )
			if ( $scope.node.nodeShape == "Oval" ) {
				nodeShape
				.attr("cx", function() { return $scope.node.width/2 + "px"; })
				.attr("rx", function() { return $scope.node.width/2 + "px"; })
			}
			else {
				nodeShape.attr("width", function() { return $scope.node.width + "px"; } )
			};
			positionLabel();
			})
		$scope.$watch('node.height', function (){
			dragBoxNode.attr("height", $scope.node.height );
			dragBarE.attr("height", function() { return $scope.node.height - dragBarWidth; });
			dragBarW.attr("height", function() { return $scope.node.height - dragBarWidth; });
			dragBarN.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
			dragBarS.attr("y", function(d) { return $scope.node.y + $scope.node.height - (dragBarWidth/2) })
			dragBarNW.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
			dragBarNE.attr("y", function() { return $scope.node.y - dragBarWidth/2; } )
			dragBarSW.attr("y", function() { return $scope.node.y + $scope.node.height - dragBarWidth/2; } )
			dragBarSE.attr("y", function() { return $scope.node.y + $scope.node.height - dragBarWidth/2; } )
			if ( $scope.node.nodeShape == "Oval" ) {
				nodeShape
				.attr("cy", function() { return $scope.node.height/2 + "px"; })
				.attr("ry", function() { return $scope.node.height/2 + "px"; });
			}
			else {
				nodeShape.attr("height", function() { return $scope.node.height + "px"; } );
			};
			positionLabel();
			})
		$scope.$watch('node.label', function (){
			label.text($scope.node.label);
		})
	}

}])
